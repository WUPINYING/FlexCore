// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FlexCore.Models
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activities> Activities { get; set; }
        public virtual DbSet<ActivityCategories> ActivityCategories { get; set; }
        public virtual DbSet<ActivityStatuses> ActivityStatuses { get; set; }
        public virtual DbSet<AlternateAddresses> AlternateAddresses { get; set; }
        public virtual DbSet<BlackLists> BlackLists { get; set; }
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<CartItems> CartItems { get; set; }
        public virtual DbSet<ColorCategories> ColorCategories { get; set; }
        public virtual DbSet<CouponCategories> CouponCategories { get; set; }
        public virtual DbSet<CouponSendings> CouponSendings { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<CustomizedOrders> CustomizedOrders { get; set; }
        public virtual DbSet<CustomizedShoesPo> CustomizedShoesPo { get; set; }
        public virtual DbSet<Customized_materials> Customized_materials { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Discounts> Discounts { get; set; }
        public virtual DbSet<JobTitles> JobTitles { get; set; }
        public virtual DbSet<MemberPoints> MemberPoints { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<MembershipLevels> MembershipLevels { get; set; }
        public virtual DbSet<OneToOneReservations> OneToOneReservations { get; set; }
        public virtual DbSet<PointHistories> PointHistories { get; set; }
        public virtual DbSet<PointManage> PointManage { get; set; }
        public virtual DbSet<PointTradeIn> PointTradeIn { get; set; }
        public virtual DbSet<Privileges> Privileges { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<ProductGroups> ProductGroups { get; set; }
        public virtual DbSet<ProductImgs> ProductImgs { get; set; }
        public virtual DbSet<ProductSubCategories> ProductSubCategories { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProjectTagItems> ProjectTagItems { get; set; }
        public virtual DbSet<ProjectTags> ProjectTags { get; set; }
        public virtual DbSet<ReservationStatuses> ReservationStatuses { get; set; }
        public virtual DbSet<SalesCategories> SalesCategories { get; set; }
        public virtual DbSet<ShoesCategories> ShoesCategories { get; set; }
        public virtual DbSet<ShoesChooses> ShoesChooses { get; set; }
        public virtual DbSet<ShoesColorCategories> ShoesColorCategories { get; set; }
        public virtual DbSet<ShoesGroups> ShoesGroups { get; set; }
        public virtual DbSet<ShoesPictures> ShoesPictures { get; set; }
        public virtual DbSet<ShoppingCarts> ShoppingCarts { get; set; }
        public virtual DbSet<SizeCategories> SizeCategories { get; set; }
        public virtual DbSet<SpeakerFields> SpeakerFields { get; set; }
        public virtual DbSet<Speakers> Speakers { get; set; }
        public virtual DbSet<StaffPermissions> StaffPermissions { get; set; }
        public virtual DbSet<Staffs> Staffs { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<Type> Type { get; set; }
        public virtual DbSet<logistics_companies> logistics_companies { get; set; }
        public virtual DbSet<orderItems> orderItems { get; set; }
        public virtual DbSet<order_statuses> order_statuses { get; set; }
        public virtual DbSet<orders> orders { get; set; }
        public virtual DbSet<pay_methods> pay_methods { get; set; }
        public virtual DbSet<pay_statuses> pay_statuses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Activities>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Activiti__45F4A79158D5F803");

                entity.Property(e => e.ActivityBookEndTime).HasColumnType("datetime");

                entity.Property(e => e.ActivityBookStartTime).HasColumnType("datetime");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityDescription).HasMaxLength(300);

                entity.Property(e => e.ActivityImage)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.ActivityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActivityPlace)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fk_ActivityStatusId).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fk_ActivityCategory)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.fk_ActivityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Ac__503BEA1C");

                entity.HasOne(d => d.fk_ActivityStatus)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.fk_ActivityStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Ac__51300E55");

                entity.HasOne(d => d.fk_Speaker)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.fk_SpeakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Sp__5224328E");
            });

            modelBuilder.Entity<ActivityCategories>(entity =>
            {
                entity.HasKey(e => e.ActivityCategoryId)
                    .HasName("PK__Activity__71C78C651238BFDD");

                entity.Property(e => e.ActivityCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityStatuses>(entity =>
            {
                entity.HasKey(e => e.ActivityStatusId)
                    .HasName("PK__Activity__860CFEADEE9D2D3E");

                entity.HasIndex(e => e.ActivityStatusDescription, "UQ__Activity__732635ECCFBB5B5E")
                    .IsUnique();

                entity.Property(e => e.ActivityStatusDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<AlternateAddresses>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("PK__Alternat__091C2AFB5AC3AE80");

                entity.HasIndex(e => e.fk_MemberId, "UQ__Alternat__3B54230C2BBAB482")
                    .IsUnique();

                entity.Property(e => e.AlternateAddress1).HasMaxLength(300);

                entity.Property(e => e.AlternateAddress2).HasMaxLength(300);

                entity.HasOne(d => d.fk_Member)
                    .WithOne(p => p.AlternateAddresses)
                    .HasForeignKey<AlternateAddresses>(d => d.fk_MemberId)
                    .HasConstraintName("FK__Alternate__fk_Me__3D2915A8");
            });

            modelBuilder.Entity<BlackLists>(entity =>
            {
                entity.HasKey(e => e.BlackListId)
                    .HasName("PK__BlackLis__B54E3C740D440FFD");

                entity.Property(e => e.Behavior)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Branches>(entity =>
            {
                entity.HasKey(e => e.BranchId)
                    .HasName("PK__Branches__A1682FC54C196589");

                entity.HasIndex(e => e.BranchName, "UQ__Branches__3903DB03FC0CAD3F")
                    .IsUnique();

                entity.HasIndex(e => e.BranchAddress, "UQ__Branches__F50DE17ADCA33487")
                    .IsUnique();

                entity.Property(e => e.BranchAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CartItems>(entity =>
            {
                entity.HasKey(e => e.CartItemId)
                    .HasName("PK_CartItem");

                entity.Property(e => e.CartItemId).ValueGeneratedOnAdd();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(700);

                entity.HasOne(d => d.CartItem)
                    .WithOne(p => p.CartItems)
                    .HasForeignKey<CartItems>(d => d.CartItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItem_CartItem");

                entity.HasOne(d => d.fk_TypeNavigation)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.fk_Type)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Type");
            });

            modelBuilder.Entity<ColorCategories>(entity =>
            {
                entity.HasKey(e => e.ColorId)
                    .HasName("PK_ColorCategory");

                entity.Property(e => e.ColorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CouponCategories>(entity =>
            {
                entity.HasKey(e => e.CouponCategoryId)
                    .HasName("PK_coupon_category");

                entity.Property(e => e.CouponCategoryId).ValueGeneratedNever();

                entity.Property(e => e.CouponCategoryName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CouponSendings>(entity =>
            {
                entity.HasKey(e => e.SendingId)
                    .HasName("PK_CouponSending");

                entity.Property(e => e.RedeemedDate).HasColumnType("datetime");

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.HasOne(d => d.fk_Coupon)
                    .WithMany(p => p.CouponSendings)
                    .HasForeignKey(d => d.fk_CouponId)
                    .HasConstraintName("FK_CouponSending_Coupon");

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.CouponSendings)
                    .HasForeignKey(d => d.fk_MemberId)
                    .HasConstraintName("FK_CouponSendings_Members");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK_Coupon");

                entity.Property(e => e.CouponCode).HasMaxLength(50);

                entity.Property(e => e.CouponDescription).HasMaxLength(100);

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fk_CouponCategory)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.fk_CouponCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupon_CouponCategory");

                entity.HasOne(d => d.fk_RequiredProjectTag)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.fk_RequiredProjectTagID)
                    .HasConstraintName("FK_Coupon_ProjectTag");
            });

            modelBuilder.Entity<CustomizedOrders>(entity =>
            {
                entity.HasKey(e => e.Customized_Id)
                    .HasName("PK__Customiz__AFADABDDCE54F131");

                entity.Property(e => e.Customized_number)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.OrderCreateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderEditTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(254);

                entity.HasOne(d => d.Customized_EdgeProtectionNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomized_EdgeProtectionNavigation)
                    .HasForeignKey(d => d.Customized_EdgeProtection)
                    .HasConstraintName("FK__Customize__Custo__5BAD9CC8");

                entity.HasOne(d => d.Customized_EyeletNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomized_EyeletNavigation)
                    .HasForeignKey(d => d.Customized_Eyelet)
                    .HasConstraintName("FK__Customize__Custo__5AB9788F");

                entity.HasOne(d => d.Customized_RearNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomized_RearNavigation)
                    .HasForeignKey(d => d.Customized_Rear)
                    .HasConstraintName("FK__Customize__Custo__5CA1C101");

                entity.HasOne(d => d.Customized_Shoes)
                    .WithMany(p => p.CustomizedOrders)
                    .HasForeignKey(d => d.Customized_Shoes_Id)
                    .HasConstraintName("FK__Customize__Custo__46B27FE2");

                entity.HasOne(d => d.Customized_ToeNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomized_ToeNavigation)
                    .HasForeignKey(d => d.Customized_Toe)
                    .HasConstraintName("FK__Customize__Custo__5E8A0973");

                entity.HasOne(d => d.Customized_TongueNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomized_TongueNavigation)
                    .HasForeignKey(d => d.Customized_Tongue)
                    .HasConstraintName("FK__Customize__Custo__5D95E53A");

                entity.HasOne(d => d.Fk_ForMemberCustomized)
                    .WithMany(p => p.CustomizedOrders)
                    .HasForeignKey(d => d.Fk_ForMemberCustomized_Id)
                    .HasConstraintName("FK_CustomizedOrders_Members");
            });

            modelBuilder.Entity<CustomizedShoesPo>(entity =>
            {
                entity.HasKey(e => e.ShoesProductId)
                    .HasName("PK__Customiz__D7D2FD91792B994F");

                entity.Property(e => e.DataCreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataEditTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ShoesDescription).HasMaxLength(254);

                entity.Property(e => e.ShoesName)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.Property(e => e.ShoesOrigin).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.HasOne(d => d.fk_ShoesCategory)
                    .WithMany(p => p.CustomizedShoesPo)
                    .HasForeignKey(d => d.fk_ShoesCategoryId)
                    .HasConstraintName("FK__Customize__fk_Sh__44CA3770");

                entity.HasOne(d => d.fk_ShoesColor)
                    .WithMany(p => p.CustomizedShoesPo)
                    .HasForeignKey(d => d.fk_ShoesColorId)
                    .HasConstraintName("FK__Customize__fk_Sh__45BE5BA9");
            });

            modelBuilder.Entity<Customized_materials>(entity =>
            {
                entity.HasKey(e => e.Shoesmaterial_Id)
                    .HasName("PK__Customiz__06EFE12D3341E3C5");

                entity.Property(e => e.material_Name)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Departments>(entity =>
            {
                entity.HasKey(e => e.DepartmentId)
                    .HasName("PK__Departme__B2079BED023F95C3");

                entity.Property(e => e.DepartmentName).HasMaxLength(50);
            });

            modelBuilder.Entity<Discounts>(entity =>
            {
                entity.HasKey(e => e.DiscountId)
                    .HasName("PK_Discount");

                entity.Property(e => e.DiscountDescription).HasMaxLength(100);

                entity.Property(e => e.DiscountName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.fk_ProjectTag)
                    .WithMany(p => p.Discounts)
                    .HasForeignKey(d => d.fk_ProjectTagId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Discount_DiscountGroup");
            });

            modelBuilder.Entity<JobTitles>(entity =>
            {
                entity.HasKey(e => e.TitleId)
                    .HasName("PK__JobTitle__75758986DFA010AD");

                entity.HasIndex(e => e.TitleName, "UQ__JobTitle__252BE89C516695E0")
                    .IsUnique();

                entity.Property(e => e.TitleName).HasMaxLength(50);
            });

            modelBuilder.Entity<MemberPoints>(entity =>
            {
                entity.HasIndex(e => e.fk_MemberId, "UQ__MemberPo__3B54230C8C81DA21")
                    .IsUnique();

                entity.HasOne(d => d.fk_Member)
                    .WithOne(p => p.MemberPoints)
                    .HasForeignKey<MemberPoints>(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberPoi__fk_Me__4E53A1AA");
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("PK__Members__0CF04B18BDECE389");

                entity.HasIndex(e => e.Mobile, "UQ__Members__6FAE0782E1A56EB7")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "UQ__Members__A9D1053442354E1D")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "UQ__Members__B0C3AC46ED2152FF")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.CommonAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Registration)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.fk_BlackList)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.fk_BlackListId)
                    .HasConstraintName("FK__Members__fk_Blac__503BEA1C");

                entity.HasOne(d => d.fk_Level)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.fk_LevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Members__fk_Leve__00DF2177");
            });

            modelBuilder.Entity<MembershipLevels>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("PK__Membersh__09F03C26F7CA5148");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MinSpending)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasMany(d => d.fk_Privilege)
                    .WithMany(p => p.fk_Level)
                    .UsingEntity<Dictionary<string, object>>(
                        "MembershipLevelPrivileges",
                        l => l.HasOne<Privileges>().WithMany().HasForeignKey("fk_PrivilegeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Membershi__fk_Pr__531856C7"),
                        r => r.HasOne<MembershipLevels>().WithMany().HasForeignKey("fk_LevelId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Membershi__fk_Le__01D345B0"),
                        j =>
                        {
                            j.HasKey("fk_LevelId", "fk_PrivilegeId").HasName("PK__Membersh__580C8EAA54DCDBA0");

                            j.ToTable("MembershipLevelPrivileges");
                        });
            });

            modelBuilder.Entity<OneToOneReservations>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK__OneToOne__B7EE5F24D2D6C9DA");

                entity.Property(e => e.ReservationCreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReservationEndTime).HasColumnType("datetime");

                entity.Property(e => e.ReservationStartTime).HasColumnType("datetime");

                entity.HasOne(d => d.fk_Booker)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_BookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OneToOneReservations_Members");

                entity.HasOne(d => d.fk_Branch)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_BranchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Br__681373AD");

                entity.HasOne(d => d.fk_ReservationSpeaker)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_ReservationSpeakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Re__690797E6");

                entity.HasOne(d => d.fk_ReservationStatus)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.fk_ReservationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Re__69FBBC1F");
            });

            modelBuilder.Entity<PointHistories>(entity =>
            {
                entity.HasKey(e => e.PointHistoryId)
                    .HasName("PK__PointHis__DBE13F178E6B8343");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_MemberId)
                    .HasConstraintName("FK__PointHist__fk_Me__03BB8E22");

                entity.HasOne(d => d.fk_MemberPoints)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_MemberPointsId)
                    .HasConstraintName("FK_PointHistories_MemberPoints");

                entity.HasOne(d => d.fk_Order)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_OrderId)
                    .HasConstraintName("FK_PointHistories_orders");

                entity.HasOne(d => d.fk_Type)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.fk_TypeId)
                    .HasConstraintName("FK_PointHistories_Type");
            });

            modelBuilder.Entity<PointManage>(entity =>
            {
                entity.Property(e => e.PointExpirationDate).HasColumnType("datetime");

                entity.HasOne(d => d.fk_Type)
                    .WithMany(p => p.PointManage)
                    .HasForeignKey(d => d.fk_TypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointManage_Type");
            });

            modelBuilder.Entity<PointTradeIn>(entity =>
            {
                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.GetPoints)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GiftThreshold)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MaxGetPoints)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.PointTradeIn)
                    .HasForeignKey(d => d.fk_MemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointTradeIn_Members");

                entity.HasOne(d => d.fk_Order)
                    .WithMany(p => p.PointTradeIn)
                    .HasForeignKey(d => d.fk_OrderId)
                    .HasConstraintName("FK_PointTradeIn_orders");
            });

            modelBuilder.Entity<Privileges>(entity =>
            {
                entity.HasKey(e => e.PrivilegeId)
                    .HasName("PK__Privileg__B3E77E5C75DCF9CC");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.PrivilegeName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ProductCategories>(entity =>
            {
                entity.HasKey(e => e.ProductCategoryId)
                    .HasName("PK_ProductCategory");

                entity.Property(e => e.CategoryPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ProductCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.fk_SalesCategory)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.fk_SalesCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategories_SalesCategories");
            });

            modelBuilder.Entity<ProductGroups>(entity =>
            {
                entity.HasKey(e => e.ProductGroupId);

                entity.Property(e => e.fk_ProductId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Color)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.fk_ColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_ColorCategories");

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.fk_ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_Products");

                entity.HasOne(d => d.fk_Size)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.fk_SizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_SizeCategories");
            });

            modelBuilder.Entity<ProductImgs>(entity =>
            {
                entity.HasKey(e => e.ProductImgId)
                    .HasName("PK_ProductImg");

                entity.Property(e => e.ImgPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.fk_ProductId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.ProductImgs)
                    .HasForeignKey(d => d.fk_ProductId)
                    .HasConstraintName("FK_ProductImgs_Products");
            });

            modelBuilder.Entity<ProductSubCategories>(entity =>
            {
                entity.HasKey(e => e.ProductSubCategoryId)
                    .HasName("PK_ProductSubCategory");

                entity.Property(e => e.ProductSubCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubCategoryPath)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.fk_ProductCategory)
                    .WithMany(p => p.ProductSubCategories)
                    .HasForeignKey(d => d.fk_ProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSubCategories_ProductCategories");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_Product");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unique')");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EditTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.ProductDescription).IsRequired();

                entity.Property(e => e.ProductMaterial).HasMaxLength(50);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.Property(e => e.ProductOrigin)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.Tag).HasMaxLength(100);

                entity.HasOne(d => d.fk_ProductSubCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.fk_ProductSubCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_ProductSubCategory");
            });

            modelBuilder.Entity<ProjectTagItems>(entity =>
            {
                entity.HasKey(e => new { e.fk_ProjectTagId, e.fk_ProductId })
                    .HasName("PK_discount_group_item");

                entity.Property(e => e.fk_ProductId)
                    .HasMaxLength(254)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Product)
                    .WithMany(p => p.ProjectTagItems)
                    .HasForeignKey(d => d.fk_ProductId)
                    .HasConstraintName("FK_discount_group_item_discount_group");
            });

            modelBuilder.Entity<ProjectTags>(entity =>
            {
                entity.HasKey(e => e.ProjectTagId)
                    .HasName("PK_discount_group");

                entity.Property(e => e.CreateAt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");

                entity.Property(e => e.ProjectTagName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ReservationStatuses>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK__Reservat__B7EE5F241FC7E17E");

                entity.HasIndex(e => e.ReservationStatusDescription, "UQ__Reservat__ADF40EA67A3EF911")
                    .IsUnique();

                entity.Property(e => e.ReservationId).ValueGeneratedNever();

                entity.Property(e => e.ReservationStatusDescription)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<SalesCategories>(entity =>
            {
                entity.HasKey(e => e.SalesCategoryId)
                    .HasName("PK_SalesCategory");

                entity.Property(e => e.SalesCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesCategories>(entity =>
            {
                entity.HasKey(e => e.ShoesCategoryId)
                    .HasName("PK__ShoesCat__A478678BE8EBC46D");

                entity.Property(e => e.ShoesCategoryName)
                    .IsRequired()
                    .HasMaxLength(254);
            });

            modelBuilder.Entity<ShoesChooses>(entity =>
            {
                entity.HasKey(e => e.OptionId);

                entity.Property(e => e.OptinName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesColorCategories>(entity =>
            {
                entity.HasKey(e => e.ShoesColorId)
                    .HasName("PK__ShoesCol__BB1469D4625478B5");

                entity.Property(e => e.ColorCode).HasMaxLength(100);

                entity.Property(e => e.ColorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesGroups>(entity =>
            {
                entity.HasKey(e => e.ShoesGroupId);

                entity.Property(e => e.Remark).HasMaxLength(254);

                entity.HasOne(d => d.fk_Material)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_MaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_Customized_materials");

                entity.HasOne(d => d.fk_Option)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_OptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesChooses");

                entity.HasOne(d => d.fk_ShoesColor)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_ShoesColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesColorCategories");

                entity.HasOne(d => d.fk_ShoesMain)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.fk_ShoesMainId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_CustomizedShoesPo");
            });

            modelBuilder.Entity<ShoesPictures>(entity =>
            {
                entity.HasKey(e => e.ShoesPicture_Id)
                    .HasName("PK__ShoesPic__DF35EBA4CB1E8B1C");

                entity.Property(e => e.ShoesPictureUrl).HasMaxLength(4000);

                entity.HasOne(d => d.fk_ShoesPictureProduct)
                    .WithMany(p => p.ShoesPictures)
                    .HasForeignKey(d => d.fk_ShoesPictureProduct_Id)
                    .HasConstraintName("FK__ShoesPict__fk_Sh__70A8B9AE");
            });

            modelBuilder.Entity<ShoppingCarts>(entity =>
            {
                entity.HasKey(e => e.CartId)
                    .HasName("PK_ShoppingCart");

                entity.HasOne(d => d.fk_Member)
                    .WithMany(p => p.ShoppingCarts)
                    .HasForeignKey(d => d.fk_MemberID)
                    .HasConstraintName("FK_ShoppingCarts_Members");
            });

            modelBuilder.Entity<SizeCategories>(entity =>
            {
                entity.HasKey(e => e.SizeId);

                entity.Property(e => e.SizeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SpeakerFields>(entity =>
            {
                entity.HasKey(e => e.FieldId)
                    .HasName("PK__SpeakerF__C8B6FF07EF052A18");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Speakers>(entity =>
            {
                entity.HasKey(e => e.SpeakerId)
                    .HasName("PK__Speakers__79E75759DAEA2E8C");

                entity.Property(e => e.SpeakerDescription).HasMaxLength(500);

                entity.Property(e => e.SpeakerImg)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SpeakerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpeakerPhone)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_SpeakerBranch)
                    .WithMany(p => p.Speakers)
                    .HasForeignKey(d => d.fk_SpeakerBranchId)
                    .HasConstraintName("FK__Speakers__fk_Spe__0B5CAFEA");

                entity.HasOne(d => d.fk_SpeakerField)
                    .WithMany(p => p.Speakers)
                    .HasForeignKey(d => d.fk_SpeakerFieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Speakers__fk_Spe__0C50D423");
            });

            modelBuilder.Entity<StaffPermissions>(entity =>
            {
                entity.HasKey(e => e.PermissionsId)
                    .HasName("PK__StaffPer__1EDAF9A81349059A");

                entity.HasIndex(e => e.LevelName, "UQ__StaffPer__9EF3BE7B6829F02D")
                    .IsUnique();

                entity.Property(e => e.LevelName).HasMaxLength(30);
            });

            modelBuilder.Entity<Staffs>(entity =>
            {
                entity.HasKey(e => e.StaffId);

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.fk_Department)
                    .WithMany(p => p.Staffs)
                    .HasForeignKey(d => d.fk_DepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Depar__74794A92");

                entity.HasOne(d => d.fk_Permissions)
                    .WithMany(p => p.Staffs)
                    .HasForeignKey(d => d.fk_PermissionsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Permi__756D6ECB");

                entity.HasOne(d => d.fk_Title)
                    .WithMany(p => p.Staffs)
                    .HasForeignKey(d => d.fk_TitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Title__76619304");
            });

            modelBuilder.Entity<Suppliers>(entity =>
            {
                entity.HasKey(e => e.SupplierId)
                    .HasName("PK__Supplier__4BE666B483429D00");

                entity.HasIndex(e => e.SupplierCompanyNumber, "UQ__Supplier__AE8E9B41D66DB39A")
                    .IsUnique();

                entity.Property(e => e.SupplierCompanyAddress).HasMaxLength(250);

                entity.Property(e => e.SupplierCompanyEmail).HasMaxLength(250);

                entity.Property(e => e.SupplierCompanyName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierStartDate).HasColumnType("datetime");

                entity.Property(e => e.Supply_Material).HasMaxLength(50);
            });

            modelBuilder.Entity<Type>(entity =>
            {
                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<logistics_companies>(entity =>
            {
                entity.Property(e => e.logistics_description).HasMaxLength(50);

                entity.Property(e => e.name).HasMaxLength(50);

                entity.Property(e => e.tel)
                    .HasMaxLength(12)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<orderItems>(entity =>
            {
                entity.Property(e => e.Items_description).HasMaxLength(50);

                entity.Property(e => e.discount_name).HasMaxLength(50);

                entity.Property(e => e.product_name).HasMaxLength(50);

                entity.HasOne(d => d.fk_type)
                    .WithMany(p => p.orderItems)
                    .HasForeignKey(d => d.fk_typeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_orderItems_Type");

                entity.HasOne(d => d.order)
                    .WithMany(p => p.orderItems)
                    .HasForeignKey(d => d.order_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orderItem__order__1B9317B3");
            });

            modelBuilder.Entity<order_statuses>(entity =>
            {
                entity.Property(e => e.order_status).HasMaxLength(50);
            });

            modelBuilder.Entity<orders>(entity =>
            {
                entity.Property(e => e.cellphone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.close_time).HasColumnType("datetime");

                entity.Property(e => e.coupon_name).HasMaxLength(50);

                entity.Property(e => e.order_description).HasMaxLength(50);

                entity.Property(e => e.ordertime).HasColumnType("datetime");

                entity.Property(e => e.receipt)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.receiver).HasMaxLength(50);

                entity.Property(e => e.recipient_address).HasMaxLength(50);

                entity.HasOne(d => d.fk_member)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.fk_member_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__fk_membe__5BAD9CC8");

                entity.HasOne(d => d.fk_type)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.fk_typeId)
                    .HasConstraintName("FK_orders_Type");

                entity.HasOne(d => d.logistics_company)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.logistics_company_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__logistic__5BAD9CC8");

                entity.HasOne(d => d.order_status)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.order_status_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__order_st__5CA1C101");

                entity.HasOne(d => d.pay_method)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.pay_method_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__pay_meth__5D95E53A");

                entity.HasOne(d => d.pay_status)
                    .WithMany(p => p.orders)
                    .HasForeignKey(d => d.pay_status_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__pay_stat__5E8A0973");
            });

            modelBuilder.Entity<pay_methods>(entity =>
            {
                entity.Property(e => e.pay_method).HasMaxLength(50);
            });

            modelBuilder.Entity<pay_statuses>(entity =>
            {
                entity.Property(e => e.pay_status).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}