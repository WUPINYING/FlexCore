// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace FlexService.Models
{
    public partial class FlexContext : DbContext
    {
        public FlexContext()
        {
        }

        public FlexContext(DbContextOptions<FlexContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Activities> Activities { get; set; }
        public virtual DbSet<ActivityCategories> ActivityCategories { get; set; }
        public virtual DbSet<ActivityStatuses> ActivityStatuses { get; set; }
        public virtual DbSet<AlternateAddresses> AlternateAddresses { get; set; }
        public virtual DbSet<BlackLists> BlackLists { get; set; }
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<CartItems> CartItems { get; set; }
        public virtual DbSet<ColorCategories> ColorCategories { get; set; }
        public virtual DbSet<CouponCategories> CouponCategories { get; set; }
        public virtual DbSet<CouponSendings> CouponSendings { get; set; }
        public virtual DbSet<Coupons> Coupons { get; set; }
        public virtual DbSet<CustomizedMaterials> CustomizedMaterials { get; set; }
        public virtual DbSet<CustomizedOrders> CustomizedOrders { get; set; }
        public virtual DbSet<CustomizedShoesPo> CustomizedShoesPo { get; set; }
        public virtual DbSet<Departments> Departments { get; set; }
        public virtual DbSet<Discounts> Discounts { get; set; }
        public virtual DbSet<JobTitles> JobTitles { get; set; }
        public virtual DbSet<LogisticsCompanies> LogisticsCompanies { get; set; }
        public virtual DbSet<MemberPoints> MemberPoints { get; set; }
        public virtual DbSet<Members> Members { get; set; }
        public virtual DbSet<MembershipLevels> MembershipLevels { get; set; }
        public virtual DbSet<OneToOneReservations> OneToOneReservations { get; set; }
        public virtual DbSet<OrderItems> OrderItems { get; set; }
        public virtual DbSet<OrderStatuses> OrderStatuses { get; set; }
        public virtual DbSet<Orders> Orders { get; set; }
        public virtual DbSet<PayMethods> PayMethods { get; set; }
        public virtual DbSet<PayStatuses> PayStatuses { get; set; }
        public virtual DbSet<PointHistories> PointHistories { get; set; }
        public virtual DbSet<PointManage> PointManage { get; set; }
        public virtual DbSet<PointTradeIn> PointTradeIn { get; set; }
        public virtual DbSet<Privileges> Privileges { get; set; }
        public virtual DbSet<ProductCategories> ProductCategories { get; set; }
        public virtual DbSet<ProductGroups> ProductGroups { get; set; }
        public virtual DbSet<ProductImgs> ProductImgs { get; set; }
        public virtual DbSet<ProductSubCategories> ProductSubCategories { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<ProjectTagItems> ProjectTagItems { get; set; }
        public virtual DbSet<ProjectTags> ProjectTags { get; set; }
        public virtual DbSet<ReservationStatuses> ReservationStatuses { get; set; }
        public virtual DbSet<SalesCategories> SalesCategories { get; set; }
        public virtual DbSet<ShoesCategories> ShoesCategories { get; set; }
        public virtual DbSet<ShoesChooses> ShoesChooses { get; set; }
        public virtual DbSet<ShoesColorCategories> ShoesColorCategories { get; set; }
        public virtual DbSet<ShoesGroups> ShoesGroups { get; set; }
        public virtual DbSet<ShoesPictures> ShoesPictures { get; set; }
        public virtual DbSet<ShoppingCarts> ShoppingCarts { get; set; }
        public virtual DbSet<SizeCategories> SizeCategories { get; set; }
        public virtual DbSet<SpeakerFields> SpeakerFields { get; set; }
        public virtual DbSet<Speakers> Speakers { get; set; }
        public virtual DbSet<StaffPermissions> StaffPermissions { get; set; }
        public virtual DbSet<Staffs> Staffs { get; set; }
        public virtual DbSet<Suppliers> Suppliers { get; set; }
        public virtual DbSet<Type> Type { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Activities>(entity =>
            {
                entity.HasKey(e => e.ActivityId)
                    .HasName("PK__Activiti__45F4A79158D5F803");

                entity.Property(e => e.ActivityBookEndTime).HasColumnType("datetime");

                entity.Property(e => e.ActivityBookStartTime).HasColumnType("datetime");

                entity.Property(e => e.ActivityDate).HasColumnType("datetime");

                entity.Property(e => e.ActivityDescription).HasMaxLength(300);

                entity.Property(e => e.ActivityImage)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.ActivityName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ActivityPlace)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FkActivityCategoryId).HasColumnName("fk_ActivityCategoryId");

                entity.Property(e => e.FkActivityStatusId)
                    .HasColumnName("fk_ActivityStatusId")
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.FkSpeakerId).HasColumnName("fk_SpeakerId");

                entity.HasOne(d => d.FkActivityCategory)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.FkActivityCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Ac__503BEA1C");

                entity.HasOne(d => d.FkActivityStatus)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.FkActivityStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Ac__51300E55");

                entity.HasOne(d => d.FkSpeaker)
                    .WithMany(p => p.Activities)
                    .HasForeignKey(d => d.FkSpeakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Activitie__fk_Sp__5224328E");
            });

            modelBuilder.Entity<ActivityCategories>(entity =>
            {
                entity.HasKey(e => e.ActivityCategoryId)
                    .HasName("PK__Activity__71C78C651238BFDD");

                entity.Property(e => e.ActivityCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ActivityStatuses>(entity =>
            {
                entity.HasKey(e => e.ActivityStatusId)
                    .HasName("PK__Activity__860CFEADEE9D2D3E");

                entity.HasIndex(e => e.ActivityStatusDescription, "UQ__Activity__732635ECCFBB5B5E")
                    .IsUnique();

                entity.Property(e => e.ActivityStatusDescription).HasMaxLength(50);
            });

            modelBuilder.Entity<AlternateAddresses>(entity =>
            {
                entity.HasKey(e => e.AddressId)
                    .HasName("PK__Alternat__091C2AFB5AC3AE80");

                entity.HasIndex(e => e.FkMemberId, "UQ__Alternat__3B54230C2BBAB482")
                    .IsUnique();

                entity.Property(e => e.AlternateAddress1).HasMaxLength(300);

                entity.Property(e => e.AlternateAddress2).HasMaxLength(300);

                entity.Property(e => e.FkMemberId).HasColumnName("fk_MemberId");

                entity.HasOne(d => d.FkMember)
                    .WithOne(p => p.AlternateAddresses)
                    .HasForeignKey<AlternateAddresses>(d => d.FkMemberId)
                    .HasConstraintName("FK__Alternate__fk_Me__3D2915A8");
            });

            modelBuilder.Entity<BlackLists>(entity =>
            {
                entity.HasKey(e => e.BlackListId)
                    .HasName("PK__BlackLis__B54E3C740D440FFD");

                entity.Property(e => e.Behavior)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.CreatedAt)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Branches>(entity =>
            {
                entity.HasKey(e => e.BranchId)
                    .HasName("PK__Branches__A1682FC54C196589");

                entity.HasIndex(e => e.BranchName, "UQ__Branches__3903DB03FC0CAD3F")
                    .IsUnique();

                entity.HasIndex(e => e.BranchAddress, "UQ__Branches__F50DE17ADCA33487")
                    .IsUnique();

                entity.Property(e => e.BranchAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.BranchName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CartItems>(entity =>
            {
                entity.HasKey(e => e.CartItemId)
                    .HasName("PK_CartItem");

                entity.Property(e => e.CartItemId).ValueGeneratedOnAdd();

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(700);

                entity.Property(e => e.FkCardId).HasColumnName("fk_CardId");

                entity.Property(e => e.FkType).HasColumnName("fk_Type");

                entity.HasOne(d => d.CartItem)
                    .WithOne(p => p.CartItems)
                    .HasForeignKey<CartItems>(d => d.CartItemId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItem_CartItem");

                entity.HasOne(d => d.FkTypeNavigation)
                    .WithMany(p => p.CartItems)
                    .HasForeignKey(d => d.FkType)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CartItems_Type");
            });

            modelBuilder.Entity<ColorCategories>(entity =>
            {
                entity.HasKey(e => e.ColorId)
                    .HasName("PK_ColorCategory");

                entity.Property(e => e.ColorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<CouponCategories>(entity =>
            {
                entity.HasKey(e => e.CouponCategoryId)
                    .HasName("PK_coupon_category");

                entity.Property(e => e.CouponCategoryId).ValueGeneratedNever();

                entity.Property(e => e.CouponCategoryName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            modelBuilder.Entity<CouponSendings>(entity =>
            {
                entity.HasKey(e => e.SendingId)
                    .HasName("PK_CouponSending");

                entity.Property(e => e.FkCouponId).HasColumnName("fk_CouponId");

                entity.Property(e => e.FkMemberId).HasColumnName("fk_MemberId");

                entity.Property(e => e.RedeemedDate).HasColumnType("datetime");

                entity.Property(e => e.SentDate).HasColumnType("datetime");

                entity.HasOne(d => d.FkCoupon)
                    .WithMany(p => p.CouponSendings)
                    .HasForeignKey(d => d.FkCouponId)
                    .HasConstraintName("FK_CouponSending_Coupon");

                entity.HasOne(d => d.FkMember)
                    .WithMany(p => p.CouponSendings)
                    .HasForeignKey(d => d.FkMemberId)
                    .HasConstraintName("FK_CouponSendings_Members");
            });

            modelBuilder.Entity<Coupons>(entity =>
            {
                entity.HasKey(e => e.CouponId)
                    .HasName("PK_Coupon");

                entity.Property(e => e.CouponCode).HasMaxLength(50);

                entity.Property(e => e.CouponDescription).HasMaxLength(100);

                entity.Property(e => e.CouponName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FkCouponCategoryId).HasColumnName("fk_CouponCategoryId");

                entity.Property(e => e.FkRequiredProjectTagId).HasColumnName("fk_RequiredProjectTagID");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.FkCouponCategory)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.FkCouponCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Coupon_CouponCategory");

                entity.HasOne(d => d.FkRequiredProjectTag)
                    .WithMany(p => p.Coupons)
                    .HasForeignKey(d => d.FkRequiredProjectTagId)
                    .HasConstraintName("FK_Coupon_ProjectTag");
            });

            modelBuilder.Entity<CustomizedMaterials>(entity =>
            {
                entity.HasKey(e => e.ShoesmaterialId)
                    .HasName("PK__Customiz__06EFE12D3341E3C5");

                entity.ToTable("Customized_materials");

                entity.Property(e => e.ShoesmaterialId).HasColumnName("Shoesmaterial_Id");

                entity.Property(e => e.MaterialName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("material_Name");
            });

            modelBuilder.Entity<CustomizedOrders>(entity =>
            {
                entity.HasKey(e => e.CustomizedId)
                    .HasName("PK__Customiz__AFADABDDCE54F131");

                entity.Property(e => e.CustomizedId).HasColumnName("Customized_Id");

                entity.Property(e => e.CustomizedEdgeProtection).HasColumnName("Customized_EdgeProtection");

                entity.Property(e => e.CustomizedEyelet).HasColumnName("Customized_Eyelet");

                entity.Property(e => e.CustomizedNumber)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false)
                    .HasColumnName("Customized_number");

                entity.Property(e => e.CustomizedRear).HasColumnName("Customized_Rear");

                entity.Property(e => e.CustomizedShoesId).HasColumnName("Customized_Shoes_Id");

                entity.Property(e => e.CustomizedToe).HasColumnName("Customized_Toe");

                entity.Property(e => e.CustomizedTongue).HasColumnName("Customized_Tongue");

                entity.Property(e => e.FkForMemberCustomizedId).HasColumnName("Fk_ForMemberCustomized_Id");

                entity.Property(e => e.OrderCreateTime).HasColumnType("datetime");

                entity.Property(e => e.OrderEditTime).HasColumnType("datetime");

                entity.Property(e => e.Remark).HasMaxLength(254);

                entity.HasOne(d => d.CustomizedEdgeProtectionNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomizedEdgeProtectionNavigation)
                    .HasForeignKey(d => d.CustomizedEdgeProtection)
                    .HasConstraintName("FK__Customize__Custo__5BAD9CC8");

                entity.HasOne(d => d.CustomizedEyeletNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomizedEyeletNavigation)
                    .HasForeignKey(d => d.CustomizedEyelet)
                    .HasConstraintName("FK__Customize__Custo__5AB9788F");

                entity.HasOne(d => d.CustomizedRearNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomizedRearNavigation)
                    .HasForeignKey(d => d.CustomizedRear)
                    .HasConstraintName("FK__Customize__Custo__5CA1C101");

                entity.HasOne(d => d.CustomizedShoes)
                    .WithMany(p => p.CustomizedOrders)
                    .HasForeignKey(d => d.CustomizedShoesId)
                    .HasConstraintName("FK__Customize__Custo__46B27FE2");

                entity.HasOne(d => d.CustomizedToeNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomizedToeNavigation)
                    .HasForeignKey(d => d.CustomizedToe)
                    .HasConstraintName("FK__Customize__Custo__5E8A0973");

                entity.HasOne(d => d.CustomizedTongueNavigation)
                    .WithMany(p => p.CustomizedOrdersCustomizedTongueNavigation)
                    .HasForeignKey(d => d.CustomizedTongue)
                    .HasConstraintName("FK__Customize__Custo__5D95E53A");

                entity.HasOne(d => d.FkForMemberCustomized)
                    .WithMany(p => p.CustomizedOrders)
                    .HasForeignKey(d => d.FkForMemberCustomizedId)
                    .HasConstraintName("FK_CustomizedOrders_Members");
            });

            modelBuilder.Entity<CustomizedShoesPo>(entity =>
            {
                entity.HasKey(e => e.ShoesProductId)
                    .HasName("PK__Customiz__D7D2FD91792B994F");

                entity.Property(e => e.DataCreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.DataEditTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.FkShoesCategoryId).HasColumnName("fk_ShoesCategoryId");

                entity.Property(e => e.FkShoesColorId).HasColumnName("fk_ShoesColorId");

                entity.Property(e => e.ShoesDescription).HasMaxLength(254);

                entity.Property(e => e.ShoesName)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.Property(e => e.ShoesOrigin).HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.HasOne(d => d.FkShoesCategory)
                    .WithMany(p => p.CustomizedShoesPo)
                    .HasForeignKey(d => d.FkShoesCategoryId)
                    .HasConstraintName("FK__Customize__fk_Sh__44CA3770");

                entity.HasOne(d => d.FkShoesColor)
                    .WithMany(p => p.CustomizedShoesPo)
                    .HasForeignKey(d => d.FkShoesColorId)
                    .HasConstraintName("FK__Customize__fk_Sh__45BE5BA9");
            });

            modelBuilder.Entity<Departments>(entity =>
            {
                entity.HasKey(e => e.DepartmentId)
                    .HasName("PK__Departme__B2079BED023F95C3");

                entity.Property(e => e.DepartmentName).HasMaxLength(50);
            });

            modelBuilder.Entity<Discounts>(entity =>
            {
                entity.HasKey(e => e.DiscountId)
                    .HasName("PK_Discount");

                entity.Property(e => e.DiscountDescription).HasMaxLength(100);

                entity.Property(e => e.DiscountName)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.FkProjectTagId).HasColumnName("fk_ProjectTagId");

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.Property(e => e.Status).HasDefaultValueSql("((1))");

                entity.HasOne(d => d.FkProjectTag)
                    .WithMany(p => p.Discounts)
                    .HasForeignKey(d => d.FkProjectTagId)
                    .OnDelete(DeleteBehavior.SetNull)
                    .HasConstraintName("FK_Discount_DiscountGroup");
            });

            modelBuilder.Entity<JobTitles>(entity =>
            {
                entity.HasKey(e => e.TitleId)
                    .HasName("PK__JobTitle__75758986DFA010AD");

                entity.HasIndex(e => e.TitleName, "UQ__JobTitle__252BE89C516695E0")
                    .IsUnique();

                entity.Property(e => e.FkStaffPermissions).HasColumnName("fk_StaffPermissions");

                entity.Property(e => e.TitleName).HasMaxLength(50);
            });

            modelBuilder.Entity<LogisticsCompanies>(entity =>
            {
                entity.ToTable("logistics_companies");

                entity.Property(e => e.LogisticsDescription)
                    .HasMaxLength(50)
                    .HasColumnName("logistics_description");

                entity.Property(e => e.Name)
                    .HasMaxLength(50)
                    .HasColumnName("name");

                entity.Property(e => e.Tel)
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("tel");
            });

            modelBuilder.Entity<MemberPoints>(entity =>
            {
                entity.HasIndex(e => e.FkMemberId, "UQ__MemberPo__3B54230C8C81DA21")
                    .IsUnique();

                entity.Property(e => e.FkMemberId).HasColumnName("fk_MemberId");

                entity.HasOne(d => d.FkMember)
                    .WithOne(p => p.MemberPoints)
                    .HasForeignKey<MemberPoints>(d => d.FkMemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__MemberPoi__fk_Me__4E53A1AA");
            });

            modelBuilder.Entity<Members>(entity =>
            {
                entity.HasKey(e => e.MemberId)
                    .HasName("PK__Members__0CF04B18BDECE389");

                entity.HasIndex(e => e.Mobile, "UQ__Members__6FAE0782E1A56EB7")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "UQ__Members__A9D1053442354E1D")
                    .IsUnique();

                entity.HasIndex(e => e.Account, "UQ__Members__B0C3AC46ED2152FF")
                    .IsUnique();

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.CommonAddress)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.EncryptedPassword)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.Property(e => e.FkBlackListId).HasColumnName("fk_BlackListId");

                entity.Property(e => e.FkLevelId).HasColumnName("fk_LevelId");

                entity.Property(e => e.Mobile)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Registration)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.HasOne(d => d.FkBlackList)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.FkBlackListId)
                    .HasConstraintName("FK__Members__fk_Blac__503BEA1C");

                entity.HasOne(d => d.FkLevel)
                    .WithMany(p => p.Members)
                    .HasForeignKey(d => d.FkLevelId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Members__fk_Leve__00DF2177");
            });

            modelBuilder.Entity<MembershipLevels>(entity =>
            {
                entity.HasKey(e => e.LevelId)
                    .HasName("PK__Membersh__09F03C26F7CA5148");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.LevelName)
                    .IsRequired()
                    .HasMaxLength(10);

                entity.Property(e => e.MinSpending)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasMany(d => d.FkPrivilege)
                    .WithMany(p => p.FkLevel)
                    .UsingEntity<Dictionary<string, object>>(
                        "MembershipLevelPrivileges",
                        l => l.HasOne<Privileges>().WithMany().HasForeignKey("FkPrivilegeId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Membershi__fk_Pr__531856C7"),
                        r => r.HasOne<MembershipLevels>().WithMany().HasForeignKey("FkLevelId").OnDelete(DeleteBehavior.ClientSetNull).HasConstraintName("FK__Membershi__fk_Le__01D345B0"),
                        j =>
                        {
                            j.HasKey("FkLevelId", "FkPrivilegeId").HasName("PK__Membersh__580C8EAA54DCDBA0");

                            j.ToTable("MembershipLevelPrivileges");

                            j.IndexerProperty<int>("FkLevelId").HasColumnName("fk_LevelId");

                            j.IndexerProperty<int>("FkPrivilegeId").HasColumnName("fk_PrivilegeId");
                        });
            });

            modelBuilder.Entity<OneToOneReservations>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK__OneToOne__B7EE5F24D2D6C9DA");

                entity.Property(e => e.FkBookerId).HasColumnName("fk_BookerId");

                entity.Property(e => e.FkBranchId).HasColumnName("fk_BranchId");

                entity.Property(e => e.FkReservationSpeakerId).HasColumnName("fk_ReservationSpeakerId");

                entity.Property(e => e.FkReservationStatusId).HasColumnName("fk_ReservationStatusId");

                entity.Property(e => e.ReservationCreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ReservationEndTime).HasColumnType("datetime");

                entity.Property(e => e.ReservationStartTime).HasColumnType("datetime");

                entity.HasOne(d => d.FkBooker)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.FkBookerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_OneToOneReservations_Members");

                entity.HasOne(d => d.FkBranch)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.FkBranchId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Br__681373AD");

                entity.HasOne(d => d.FkReservationSpeaker)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.FkReservationSpeakerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Re__690797E6");

                entity.HasOne(d => d.FkReservationStatus)
                    .WithMany(p => p.OneToOneReservations)
                    .HasForeignKey(d => d.FkReservationStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__OneToOneR__fk_Re__69FBBC1F");
            });

            modelBuilder.Entity<OrderItems>(entity =>
            {
                entity.ToTable("orderItems");

                entity.Property(e => e.DiscountName)
                    .HasMaxLength(50)
                    .HasColumnName("discount_name");

                entity.Property(e => e.DiscountSubtotal).HasColumnName("discount_subtotal");

                entity.Property(e => e.FkTypeId).HasColumnName("fk_typeId");

                entity.Property(e => e.ItemsDescription)
                    .HasMaxLength(50)
                    .HasColumnName("Items_description");

                entity.Property(e => e.OrderId).HasColumnName("order_Id");

                entity.Property(e => e.PerPrice).HasColumnName("per_price");

                entity.Property(e => e.ProductName)
                    .HasMaxLength(50)
                    .HasColumnName("product_name");

                entity.Property(e => e.Quantity).HasColumnName("quantity");

                entity.Property(e => e.Subtotal).HasColumnName("subtotal");

                entity.HasOne(d => d.FkType)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.FkTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_orderItems_Type");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.OrderItems)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orderItem__order__1B9317B3");
            });

            modelBuilder.Entity<OrderStatuses>(entity =>
            {
                entity.ToTable("order_statuses");

                entity.Property(e => e.OrderStatus)
                    .HasMaxLength(50)
                    .HasColumnName("order_status");
            });

            modelBuilder.Entity<Orders>(entity =>
            {
                entity.ToTable("orders");

                entity.Property(e => e.Cellphone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("cellphone");

                entity.Property(e => e.Close).HasColumnName("close");

                entity.Property(e => e.CloseTime)
                    .HasColumnType("datetime")
                    .HasColumnName("close_time");

                entity.Property(e => e.CouponDiscount).HasColumnName("coupon_discount");

                entity.Property(e => e.CouponName)
                    .HasMaxLength(50)
                    .HasColumnName("coupon_name");

                entity.Property(e => e.FkMemberId).HasColumnName("fk_member_Id");

                entity.Property(e => e.FkTypeId).HasColumnName("fk_typeId");

                entity.Property(e => e.Freight).HasColumnName("freight");

                entity.Property(e => e.LogisticsCompanyId).HasColumnName("logistics_company_Id");

                entity.Property(e => e.OrderDescription)
                    .HasMaxLength(50)
                    .HasColumnName("order_description");

                entity.Property(e => e.OrderStatusId).HasColumnName("order_status_Id");

                entity.Property(e => e.Ordertime)
                    .HasColumnType("datetime")
                    .HasColumnName("ordertime");

                entity.Property(e => e.PayMethodId).HasColumnName("pay_method_Id");

                entity.Property(e => e.PayStatusId).HasColumnName("pay_status_Id");

                entity.Property(e => e.Receipt)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("receipt");

                entity.Property(e => e.Receiver)
                    .HasMaxLength(50)
                    .HasColumnName("receiver");

                entity.Property(e => e.RecipientAddress)
                    .HasMaxLength(50)
                    .HasColumnName("recipient_address");

                entity.Property(e => e.TotalPrice).HasColumnName("total_price");

                entity.Property(e => e.TotalQuantity).HasColumnName("total_quantity");

                entity.HasOne(d => d.FkMember)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.FkMemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__fk_membe__5BAD9CC8");

                entity.HasOne(d => d.FkType)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.FkTypeId)
                    .HasConstraintName("FK_orders_Type");

                entity.HasOne(d => d.LogisticsCompany)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.LogisticsCompanyId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__logistic__5BAD9CC8");

                entity.HasOne(d => d.OrderStatus)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.OrderStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__order_st__5CA1C101");

                entity.HasOne(d => d.PayMethod)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PayMethodId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__pay_meth__5D95E53A");

                entity.HasOne(d => d.PayStatus)
                    .WithMany(p => p.Orders)
                    .HasForeignKey(d => d.PayStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__orders__pay_stat__5E8A0973");
            });

            modelBuilder.Entity<PayMethods>(entity =>
            {
                entity.ToTable("pay_methods");

                entity.Property(e => e.PayMethod)
                    .HasMaxLength(50)
                    .HasColumnName("pay_method");
            });

            modelBuilder.Entity<PayStatuses>(entity =>
            {
                entity.ToTable("pay_statuses");

                entity.Property(e => e.PayStatus)
                    .HasMaxLength(50)
                    .HasColumnName("pay_status");
            });

            modelBuilder.Entity<PointHistories>(entity =>
            {
                entity.HasKey(e => e.PointHistoryId)
                    .HasName("PK__PointHis__DBE13F178E6B8343");

                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FkMemberId).HasColumnName("fk_MemberId");

                entity.Property(e => e.FkMemberPointsId).HasColumnName("fk_MemberPointsId");

                entity.Property(e => e.FkOrderId).HasColumnName("fk_OrderId");

                entity.Property(e => e.FkTypeId).HasColumnName("fk_TypeId");

                entity.HasOne(d => d.FkMember)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.FkMemberId)
                    .HasConstraintName("FK__PointHist__fk_Me__03BB8E22");

                entity.HasOne(d => d.FkMemberPoints)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.FkMemberPointsId)
                    .HasConstraintName("FK_PointHistories_MemberPoints");

                entity.HasOne(d => d.FkOrder)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.FkOrderId)
                    .HasConstraintName("FK_PointHistories_orders");

                entity.HasOne(d => d.FkType)
                    .WithMany(p => p.PointHistories)
                    .HasForeignKey(d => d.FkTypeId)
                    .HasConstraintName("FK_PointHistories_Type");
            });

            modelBuilder.Entity<PointManage>(entity =>
            {
                entity.Property(e => e.FkTypeId).HasColumnName("fk_TypeId");

                entity.Property(e => e.PointExpirationDate).HasColumnType("datetime");

                entity.HasOne(d => d.FkType)
                    .WithMany(p => p.PointManage)
                    .HasForeignKey(d => d.FkTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointManage_Type");
            });

            modelBuilder.Entity<PointTradeIn>(entity =>
            {
                entity.Property(e => e.EffectiveDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.ExpirationDate).HasColumnType("datetime");

                entity.Property(e => e.FkMemberId).HasColumnName("fk_MemberId");

                entity.Property(e => e.FkOrderId).HasColumnName("fk_OrderId");

                entity.Property(e => e.GetPoints)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.GiftThreshold)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.MaxGetPoints)
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkMember)
                    .WithMany(p => p.PointTradeIn)
                    .HasForeignKey(d => d.FkMemberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PointTradeIn_Members");

                entity.HasOne(d => d.FkOrder)
                    .WithMany(p => p.PointTradeIn)
                    .HasForeignKey(d => d.FkOrderId)
                    .HasConstraintName("FK_PointTradeIn_orders");
            });

            modelBuilder.Entity<Privileges>(entity =>
            {
                entity.HasKey(e => e.PrivilegeId)
                    .HasName("PK__Privileg__B3E77E5C75DCF9CC");

                entity.Property(e => e.Description).HasMaxLength(300);

                entity.Property(e => e.PrivilegeName)
                    .IsRequired()
                    .HasMaxLength(30);
            });

            modelBuilder.Entity<ProductCategories>(entity =>
            {
                entity.HasKey(e => e.ProductCategoryId)
                    .HasName("PK_ProductCategory");

                entity.Property(e => e.CategoryPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.FkSalesCategoryId).HasColumnName("fk_SalesCategoryId");

                entity.Property(e => e.ProductCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.HasOne(d => d.FkSalesCategory)
                    .WithMany(p => p.ProductCategories)
                    .HasForeignKey(d => d.FkSalesCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductCategories_SalesCategories");
            });

            modelBuilder.Entity<ProductGroups>(entity =>
            {
                entity.HasKey(e => e.ProductGroupId);

                entity.Property(e => e.FkColorId).HasColumnName("fk_ColorId");

                entity.Property(e => e.FkProductId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("fk_ProductId");

                entity.Property(e => e.FkSizeId).HasColumnName("fk_SizeId");

                entity.HasOne(d => d.FkColor)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.FkColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_ColorCategories");

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.FkProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_Products");

                entity.HasOne(d => d.FkSize)
                    .WithMany(p => p.ProductGroups)
                    .HasForeignKey(d => d.FkSizeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductGroups_SizeCategories");
            });

            modelBuilder.Entity<ProductImgs>(entity =>
            {
                entity.HasKey(e => e.ProductImgId)
                    .HasName("PK_ProductImg");

                entity.Property(e => e.FkProductId)
                    .IsRequired()
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("fk_ProductId");

                entity.Property(e => e.ImgPath)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.ProductImgs)
                    .HasForeignKey(d => d.FkProductId)
                    .HasConstraintName("FK_ProductImgs_Products");
            });

            modelBuilder.Entity<ProductSubCategories>(entity =>
            {
                entity.HasKey(e => e.ProductSubCategoryId)
                    .HasName("PK_ProductSubCategory");

                entity.Property(e => e.FkProductCategoryId).HasColumnName("fk_ProductCategoryId");

                entity.Property(e => e.ProductSubCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SubCategoryPath)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.FkProductCategory)
                    .WithMany(p => p.ProductSubCategories)
                    .HasForeignKey(d => d.FkProductCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductSubCategories_ProductCategories");
            });

            modelBuilder.Entity<Products>(entity =>
            {
                entity.HasKey(e => e.ProductId)
                    .HasName("PK_Product");

                entity.Property(e => e.ProductId)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('unique')");

                entity.Property(e => e.CreateTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EditTime)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.EndTime).HasColumnType("datetime");

                entity.Property(e => e.FkProductSubCategoryId).HasColumnName("fk_ProductSubCategoryId");

                entity.Property(e => e.ProductDescription).IsRequired();

                entity.Property(e => e.ProductMaterial).HasMaxLength(50);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(254);

                entity.Property(e => e.ProductOrigin)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.StartTime).HasColumnType("datetime");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("('false')");

                entity.Property(e => e.Tag).HasMaxLength(100);

                entity.HasOne(d => d.FkProductSubCategory)
                    .WithMany(p => p.Products)
                    .HasForeignKey(d => d.FkProductSubCategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_ProductSubCategory");
            });

            modelBuilder.Entity<ProjectTagItems>(entity =>
            {
                entity.HasKey(e => new { e.FkProjectTagId, e.FkProductId })
                    .HasName("PK_discount_group_item");

                entity.Property(e => e.FkProjectTagId).HasColumnName("fk_ProjectTagId");

                entity.Property(e => e.FkProductId)
                    .HasMaxLength(254)
                    .IsUnicode(false)
                    .HasColumnName("fk_ProductId");

                entity.HasOne(d => d.FkProduct)
                    .WithMany(p => p.ProjectTagItems)
                    .HasForeignKey(d => d.FkProductId)
                    .HasConstraintName("FK_discount_group_item_discount_group");
            });

            modelBuilder.Entity<ProjectTags>(entity =>
            {
                entity.HasKey(e => e.ProjectTagId)
                    .HasName("PK_discount_group");

                entity.Property(e => e.CreateAt).HasColumnType("datetime");

                entity.Property(e => e.ModifiedAt).HasColumnType("datetime");

                entity.Property(e => e.ProjectTagName)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<ReservationStatuses>(entity =>
            {
                entity.HasKey(e => e.ReservationId)
                    .HasName("PK__Reservat__B7EE5F241FC7E17E");

                entity.HasIndex(e => e.ReservationStatusDescription, "UQ__Reservat__ADF40EA67A3EF911")
                    .IsUnique();

                entity.Property(e => e.ReservationId).ValueGeneratedNever();

                entity.Property(e => e.ReservationStatusDescription)
                    .IsRequired()
                    .HasMaxLength(10);
            });

            modelBuilder.Entity<SalesCategories>(entity =>
            {
                entity.HasKey(e => e.SalesCategoryId)
                    .HasName("PK_SalesCategory");

                entity.Property(e => e.SalesCategoryName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesCategories>(entity =>
            {
                entity.HasKey(e => e.ShoesCategoryId)
                    .HasName("PK__ShoesCat__A478678BE8EBC46D");

                entity.Property(e => e.ShoesCategoryName)
                    .IsRequired()
                    .HasMaxLength(254);
            });

            modelBuilder.Entity<ShoesChooses>(entity =>
            {
                entity.HasKey(e => e.OptionId);

                entity.Property(e => e.OptinName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesColorCategories>(entity =>
            {
                entity.HasKey(e => e.ShoesColorId)
                    .HasName("PK__ShoesCol__BB1469D4625478B5");

                entity.Property(e => e.ColorCode).HasMaxLength(100);

                entity.Property(e => e.ColorName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<ShoesGroups>(entity =>
            {
                entity.HasKey(e => e.ShoesGroupId);

                entity.Property(e => e.FkMaterialId).HasColumnName("fk_MaterialId");

                entity.Property(e => e.FkOptionId).HasColumnName("fk_OptionId");

                entity.Property(e => e.FkShoesColorId).HasColumnName("fk_ShoesColorId");

                entity.Property(e => e.FkShoesMainId).HasColumnName("fk_ShoesMainId");

                entity.Property(e => e.Remark).HasMaxLength(254);

                entity.HasOne(d => d.FkMaterial)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.FkMaterialId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_Customized_materials");

                entity.HasOne(d => d.FkOption)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.FkOptionId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesChooses");

                entity.HasOne(d => d.FkShoesColor)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.FkShoesColorId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_ShoesColorCategories");

                entity.HasOne(d => d.FkShoesMain)
                    .WithMany(p => p.ShoesGroups)
                    .HasForeignKey(d => d.FkShoesMainId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ShoesGroups_CustomizedShoesPo");
            });

            modelBuilder.Entity<ShoesPictures>(entity =>
            {
                entity.HasKey(e => e.ShoesPictureId)
                    .HasName("PK__ShoesPic__DF35EBA4CB1E8B1C");

                entity.Property(e => e.ShoesPictureId).HasColumnName("ShoesPicture_Id");

                entity.Property(e => e.FkShoesPictureProductId).HasColumnName("fk_ShoesPictureProduct_Id");

                entity.Property(e => e.ShoesPictureUrl).HasMaxLength(4000);

                entity.HasOne(d => d.FkShoesPictureProduct)
                    .WithMany(p => p.ShoesPictures)
                    .HasForeignKey(d => d.FkShoesPictureProductId)
                    .HasConstraintName("FK__ShoesPict__fk_Sh__70A8B9AE");
            });

            modelBuilder.Entity<ShoppingCarts>(entity =>
            {
                entity.HasKey(e => e.CartId)
                    .HasName("PK_ShoppingCart");

                entity.Property(e => e.FkMemberId).HasColumnName("fk_MemberID");

                entity.HasOne(d => d.FkMember)
                    .WithMany(p => p.ShoppingCarts)
                    .HasForeignKey(d => d.FkMemberId)
                    .HasConstraintName("FK_ShoppingCarts_Members");
            });

            modelBuilder.Entity<SizeCategories>(entity =>
            {
                entity.HasKey(e => e.SizeId);

                entity.Property(e => e.SizeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<SpeakerFields>(entity =>
            {
                entity.HasKey(e => e.FieldId)
                    .HasName("PK__SpeakerF__C8B6FF07EF052A18");

                entity.Property(e => e.FieldName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Speakers>(entity =>
            {
                entity.HasKey(e => e.SpeakerId)
                    .HasName("PK__Speakers__79E75759DAEA2E8C");

                entity.Property(e => e.FkSpeakerBranchId).HasColumnName("fk_SpeakerBranchId");

                entity.Property(e => e.FkSpeakerFieldId).HasColumnName("fk_SpeakerFieldId");

                entity.Property(e => e.SpeakerDescription).HasMaxLength(500);

                entity.Property(e => e.SpeakerImg)
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.SpeakerName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SpeakerPhone)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkSpeakerBranch)
                    .WithMany(p => p.Speakers)
                    .HasForeignKey(d => d.FkSpeakerBranchId)
                    .HasConstraintName("FK__Speakers__fk_Spe__0B5CAFEA");

                entity.HasOne(d => d.FkSpeakerField)
                    .WithMany(p => p.Speakers)
                    .HasForeignKey(d => d.FkSpeakerFieldId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Speakers__fk_Spe__0C50D423");
            });

            modelBuilder.Entity<StaffPermissions>(entity =>
            {
                entity.HasKey(e => e.PermissionsId)
                    .HasName("PK__StaffPer__1EDAF9A81349059A");

                entity.HasIndex(e => e.LevelName, "UQ__StaffPer__9EF3BE7B6829F02D")
                    .IsUnique();

                entity.Property(e => e.LevelName).HasMaxLength(30);
            });

            modelBuilder.Entity<Staffs>(entity =>
            {
                entity.HasKey(e => e.StaffId);

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.ConfirmCode)
                    .HasMaxLength(255)
                    .IsUnicode(false);

                entity.Property(e => e.DueDate)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.FkDepartmentId).HasColumnName("fk_DepartmentId");

                entity.Property(e => e.FkPermissionsId).HasColumnName("fk_PermissionsId");

                entity.Property(e => e.FkTitleId).HasColumnName("fk_TitleId");

                entity.Property(e => e.Mobile)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(30);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(70)
                    .IsUnicode(false);

                entity.HasOne(d => d.FkDepartment)
                    .WithMany(p => p.Staffs)
                    .HasForeignKey(d => d.FkDepartmentId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Depar__74794A92");

                entity.HasOne(d => d.FkPermissions)
                    .WithMany(p => p.Staffs)
                    .HasForeignKey(d => d.FkPermissionsId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Permi__756D6ECB");

                entity.HasOne(d => d.FkTitle)
                    .WithMany(p => p.Staffs)
                    .HasForeignKey(d => d.FkTitleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__Staffs__fk_Title__76619304");
            });

            modelBuilder.Entity<Suppliers>(entity =>
            {
                entity.HasKey(e => e.SupplierId)
                    .HasName("PK__Supplier__4BE666B483429D00");

                entity.HasIndex(e => e.SupplierCompanyNumber, "UQ__Supplier__AE8E9B41D66DB39A")
                    .IsUnique();

                entity.Property(e => e.SupplierCompanyAddress).HasMaxLength(250);

                entity.Property(e => e.SupplierCompanyEmail).HasMaxLength(250);

                entity.Property(e => e.SupplierCompanyName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.SupplierStartDate).HasColumnType("datetime");

                entity.Property(e => e.SupplyMaterial)
                    .HasMaxLength(50)
                    .HasColumnName("Supply_Material");
            });

            modelBuilder.Entity<Type>(entity =>
            {
                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(20);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}